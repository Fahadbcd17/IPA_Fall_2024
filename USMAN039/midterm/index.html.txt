<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Greenhouse Dashboard</title>
  <script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/vue-router@4"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
</head>
<body class="bg-gray-100">
  <div id="app"></div>
  <script>
    const Home = {
      template: `
        <div class="flex flex-col items-center justify-center h-screen text-center">
          <h1 class="text-4xl font-bold mb-4">Welcome to Greenhouse Monitoring</h1>
          <p class="mb-6">Monitor key metrics of your greenhouse in real-time.</p >
          <div>
            <router-link to="/login" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Login</router-link>
            <router-link to="/register" class="bg-green-500 text-white px-4 py-2 rounded ml-2 hover:bg-green-600">Register</router-link>
          </div>
        </div>
      `
    };

    const Login = {
      data() {
        return {
          username: '',
          password: '',
          error: ''
        };
      },
      methods: {
        login() {
          if (this.username === 'user' && this.password === 'password') {
            localStorage.setItem('auth', true);
            this.$router.push('/dashboard');
          } else {
            this.error = 'Invalid username or password';
          }
        }
      },
      template: `
        <div class="flex flex-col items-center justify-center h-screen">
          <h2 class="text-2xl font-bold mb-4">Login</h2>
          <form @submit.prevent="login" class="w-1/3 bg-white p-6 rounded shadow">
            <div class="mb-4">
              <label for="username" class="block text-gray-700">Username</label>
              <input type="text" v-model="username" id="username" class="w-full border-2 border-gray-300 p-2 rounded" />
            </div>
            <div class="mb-4">
              <label for="password" class="block text-gray-700">Password</label>
              <input type="password" v-model="password" id="password" class="w-full border-2 border-gray-300 p-2 rounded" />
            </div>
            <p v-if="error" class="text-red-500 text-sm">{{ error }}</p >
            <div>
              <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 w-full">Login</button>
            </div>
          </form>
        </div>
      `
    };

    const Register = {
      data() {
        return {
          username: '',
          password: '',
          confirmPassword: '',
          error: ''
        };
      },
      methods: {
        register() {
          if (this.password === this.confirmPassword) {
            alert('Registration successful! Please login.');
            this.$router.push('/login');
          } else {
            this.error = 'Passwords do not match';
          }
        }
      },
      template: `
        <div class="flex flex-col items-center justify-center h-screen">
          <h2 class="text-2xl font-bold mb-4">Register</h2>
          <form @submit.prevent="register" class="w-1/3 bg-white p-6 rounded shadow">
            <div class="mb-4">
              <label for="username" class="block text-gray-700">Username</label>
              <input type="text" v-model="username" id="username" class="w-full border-2 border-gray-300 p-2 rounded" />
            </div>
            <div class="mb-4">
              <label for="password" class="block text-gray-700">Password</label>
              <input type="password" v-model="password" id="password" class="w-full border-2 border-gray-300 p-2 rounded" />
            </div>
            <div class="mb-4">
              <label for="confirmPassword" class="block text-gray-700">Confirm Password</label>
              <input type="password" v-model="confirmPassword" id="confirmPassword" class="w-full border-2 border-gray-300 p-2 rounded" />
            </div>
            <p v-if="error" class="text-red-500 text-sm">{{ error }}</p >
            <div>
              <button type="submit" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 w-full">Register</button>
            </div>
          </form>
        </div>
      `
    };

    const Dashboard = {
      data() {
        return {
          metrics: {
            temperature: 0,
            humidity: 0,
            soilMoisture: 0,
            lightLevel: 0
          }
        };
      },
      created() {
        this.fetchMetrics();
        setInterval(this.fetchMetrics, 5000);
      },
      methods: {
        fetchMetrics() {
          axios.get('/mock-api/metrics.json').then(response => {
            this.metrics = response.data;
          });
        }
      },
      template: `
        <div class="p-6">
          <h1 class="text-3xl font-bold mb-6">Dashboard</h1>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div class="bg-white p-4 rounded shadow">
              <h2 class="text-xl font-bold">Temperature</h2>
              <p class="text-2xl">{{ metrics.temperature }} Â°C</p >
            </div>
            <div class="bg-white p-4 rounded shadow">
              <h2 class="text-xl font-bold">Humidity</h2>
              <p class="text-2xl">{{ metrics.humidity }} %</p >
            </div>
            <div class="bg-white p-4 rounded shadow">
              <h2 class="text-xl font-bold">Soil Moisture</h2>
              <p class="text-2xl">{{ metrics.soilMoisture }} %</p >
            </div>
            <div class="bg-white p-4 rounded shadow">
              <h2 class="text-xl font-bold">Light Level</h2>
              <p class="text-2xl">{{ metrics.lightLevel }} lux</p >
            </div>
          </div>
        </div>
      `
    };

    const routes = [
      { path: '/', component: Home },
      { path: '/login', component: Login },
      { path: '/register', component: Register },
      { path: '/dashboard', component: Dashboard, meta: { requiresAuth: true } }
    ];

    const router = VueRouter.createRouter({
      history: VueRouter.createWebHistory(),
      routes
    });

    router.beforeEach((to, from, next) => {
      const isAuthenticated = localStorage.getItem('auth');
      if (to.meta.requiresAuth && !isAuthenticated) {
        next('/login');
      } else {
        next();
      }
    });

    const app = Vue.createApp({});
    app.use(router);
    app.mount('#app');
  </script>
</body>
</html>